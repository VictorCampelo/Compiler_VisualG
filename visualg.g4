grammar visualg;

prog: (
    ALGORITMO STRING COMENTARIO* VARIAVEIS_GLOBAIS
) EOF;

VARIAVEIS_GLOBAIS: (
		declaracao
		| constString
		| constInteiro
		| constBool
	)*;

declaracao:
    LISTA_DE_VARIAVEIS DOIS_PONTOS TIPO_DA_VARIAVEL;


constString: 
    NOME_DA_VARIAVEL ATRIBUICAO STRING;

constInteiro:
    NOME_DA_VARIAVEL ATRIBUICAO CALCULO;

constBool:
	NOME_DA_VARIAVEL ATRIBUICAO BOOL;


LISTA_DE_VARIAVEIS: NOME_DA_VARIAVEL (VIRGULA NOME_DA_VARIAVEL)*;

TIPO_DA_VARIAVEL: TIPO_DE_DADO | TIPO_VETOR;

TIPO_VETOR: VETOR: LISTA_DE_INTERVALO DE TIPO_DE_DADO;

LISTA_DE_INTERVALO: ABRE_COLCHETES INTERVALO FECHA_COLCHETES;

INTERVALO: DIGIT PONTO_PONTO DIGIT (VIRGULA DIGIT PONTO_PONTO DIGIT)*;

// falta corrigir adição de operadores unários
CALCULO: OPERADOR_UNARIO? (NOME_DA_VARIAVEL| INTEIRO | REAL) ((OPERADOR_BINARIO ABRE_PARENTESES? OPERADOR_UNARIO? (NOME_DA_VARIAVEL| INTEIRO | REAL) FECHA_PARENTESES?)* | (OPERADOR_RELACIONAL ABRE_PARENTESES? OPERADOR_LOGICO? OPERADOR_UNARIO? (NOME_DA_VARIAVEL| INTEIRO | REAL | BOOL) FECHA_PARENTESES?)*) ;

// DIGITOS
fragment DIGIT: [0-9];

TIPO_DE_DADO: 'inteiro' | 'real' | 'caractere' | 'logico';

//OPERADORES
OPERADOR_BINARIO: '+'| '-'| '*'| '/'| '\'| 'MOD'| '%';
OPERADOR_RELACIONAL: 	| '>'| '<'| '<='| '>='| '='| '<>';
OPERADOR_LOGICO: 'nao' | 'ou' | 'e' | 'xou';
OPERADOR_UNARIO: '+'| '-';

//IDS
ALGORITMO: 'algoritmo';
NOME_DA_VARIAVEL: [a-zA-Z]+ [_a-zA-Z0-9]*;
COMENTARIO: '//' (.)*? '\n' -> skip;
STRING: ["][a-zA-Z0-9 $&+,:;=?@#|'<>.^*()%-]+ ["];
VETOR: 'vetor';
DE: 'de';
ABRE_COLCHETES: '[';
FECHA_COLCHETES: ']';
VIRGULA: ',';
ATRIBUICAO: '<-';
INTEIRO: DIGIT+;
REAL: DIGIT+ ([.]DIGIT+)?;
BOOL: 'FALSO' | 'VERDADEIRO';